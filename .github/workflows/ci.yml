name: CI/CD Pipeline

on:
  push:
  pull_request:

jobs:
  lint-python:
    name: Lint & Type Check (Python)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: pip
      - name: Install Python tooling
        run: |
          python -m pip install --upgrade pip
          pip install ruff black mypy bandit pip-audit
      - name: Python Lint (ruff)
        run: ruff check backend/
      - name: Python Format Check (black)
        run: black --check backend/
      - name: Python Type Check (mypy)
        run: mypy --install-types --non-interactive backend/
      - name: Security Scan (bandit)
        run: bandit -r backend -x backend/tests
      - name: Dependency Vulnerability Audit (pip-audit)
        run: pip-audit || true

  lint-js:
    name: Lint & Format (JS)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: npm
      - name: Install JS tooling
        run: |
          npm init -y > /dev/null 2>&1 || true
          npm install --save-dev eslint prettier eslint-config-prettier eslint-plugin-import
      - name: Generate ESLint config if missing
        run: |
          if [ ! -f ".eslintrc.cjs" ] && [ ! -f ".eslintrc.json" ]; then
            cat > .eslintrc.cjs << 'EOF'
            module.exports = {
              env: { browser: true, es2021: true },
              extends: ["eslint:recommended", "plugin:import/recommended", "prettier"],
              parserOptions: { ecmaVersion: "latest", sourceType: "module" },
              ignorePatterns: ["**/dist/**", "**/build/**"],
              rules: {
                "no-unused-vars": "warn",
                "no-undef": "error",
              },
            };
            EOF
          fi
      - name: Generate Prettier config if missing
        run: |
          if [ ! -f ".prettierrc" ]; then
            echo '{ "semi": true, "singleQuote": false, "trailingComma": "es5" }' > .prettierrc
          fi
      - name: Run ESLint
        run: npx eslint js --ext .js
      - name: Run Prettier Check
        run: npx prettier --check "**/*.{js,css,html,json,md}"

  test-backend:
    name: Backend Tests
    runs-on: ubuntu-latest
    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >
          --health-cmd "redis-cli ping || exit 1"
          --health-interval 5s
          --health-timeout 3s
          --health-retries 5
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: pip
      - name: Install backend deps
        working-directory: backend
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; else pip install -r requirements-simple.txt; fi
          pip install pytest pytest-cov
      - name: Run pytest with coverage (enforce 80%)
        working-directory: backend
        env:
          REDIS_URL: redis://localhost:6379
        run: |
          pytest -q tests -k "" --cov=api --cov=ml_models --cov=./ --cov-report=xml --cov-report=term --cov-fail-under=80
      - name: Upload coverage (Python)
        uses: actions/upload-artifact@v4
        with:
          name: backend-coverage-xml
          path: backend/coverage.xml
          if-no-files-found: ignore

  test-frontend:
    name: Frontend Tests (Vitest)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: npm
      - name: Install dependencies
        run: npm ci
      - name: Run JS unit tests (Vitest with coverage)
        run: npm run test:js:ci
